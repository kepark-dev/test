import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.sql.*;
import java.util.HashMap;
import java.util.Map;

public class ExcelToDatabaseSync {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "password";

    public static void main(String[] args) {
        String excelFilePath = "path/to/your/excel/file.xlsx";
        syncExcelToDatabase(excelFilePath);
    }

    public static void syncExcelToDatabase(String excelFilePath) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            Map<Integer, String[]> excelData = readExcelData(excelFilePath);
            Map<Integer, String[]> dbData = readDatabaseData(conn);

            for (Integer id : excelData.keySet()) {
                if (!dbData.containsKey(id)) {
                    insertData(conn, id, excelData.get(id));
                } else if (!areEqual(excelData.get(id), dbData.get(id))) {
                    updateData(conn, id, excelData.get(id));
                }
            }

            for (Integer id : dbData.keySet()) {
                if (!excelData.containsKey(id)) {
                    deleteData(conn, id);
                }
            }

            System.out.println("Data synchronization complete.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Map<Integer, String[]> readExcelData(String filePath) throws Exception {
        Map<Integer, String[]> data = new HashMap<>();
        try (FileInputStream fis = new FileInputStream(new File(filePath));
             Workbook workbook = new XSSFWorkbook(fis)) {
            Sheet sheet = workbook.getSheetAt(0);
            for (Row row : sheet) {
                int id = (int) row.getCell(0).getNumericCellValue();
                String[] rowData = {
                    row.getCell(1).getStringCellValue(),
                    row.getCell(2).getStringCellValue()
                };
                data.put(id, rowData);
            }
        }
        return data;
    }

    private static Map<Integer, String[]> readDatabaseData(Connection conn) throws SQLException {
        Map<Integer, String[]> data = new HashMap<>();
        String query = "SELECT id, column1, column2 FROM your_table";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                int id = rs.getInt("id");
                String[] rowData = { rs.getString("column1"), rs.getString("column2") };
                data.put(id, rowData);
            }
        }
        return data;
    }

    private static void insertData(Connection conn, int id, String[] rowData) throws SQLException {
        String query = "INSERT INTO your_table (id, column1, column2) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, id);
            pstmt.setString(2, rowData[0]);
            pstmt.setString(3, rowData[1]);
            pstmt.executeUpdate();
        }
        System.out.println("Inserted row with id " + id);
    }

    private static void updateData(Connection conn, int id, String[] rowData) throws SQLException {
        String query = "UPDATE your_table SET column1 = ?, column2 = ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, rowData[0]);
            pstmt.setString(2, rowData[1]);
            pstmt.setInt(3, id);
            pstmt.executeUpdate();
        }
        System.out.println("Updated row with id " + id);
    }

    private static void deleteData(Connection conn, int id) throws SQLException {
        String query = "DELETE FROM your_table WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, id);
            pstmt.executeUpdate();
        }
        System.out.println("Deleted row with id " + id);
    }

    private static boolean areEqual(String[] row1, String[] row2) {
        return row1[0].equals(row2[0]) && row1[1].equals(row2[1]);
    }
}
